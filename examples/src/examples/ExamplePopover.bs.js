// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core from "@mui/core";

var messages = ([...'养绌聭']);

function reducer(state, action) {
  if (!action) {
    return {
            anchorEl: undefined,
            popupMessage: state.popupMessage
          };
  }
  var match = action._0;
  return {
          anchorEl: Caml_option.some(match[0]),
          popupMessage: match[1]
        };
}

function ExamplePopover(Props) {
  var match = React.useReducer(reducer, {
        anchorEl: undefined,
        popupMessage: ""
      });
  var dispatch = match[1];
  var state = match[0];
  var tmp = {
    children: React.createElement("div", {
          style: {
            backgroundColor: "salmon",
            fontSize: "6rem",
            margin: "1rem"
          }
        }, state.popupMessage),
    onClose: (function (_evt) {
        return Curry._1(dispatch, /* ClosePopup */0);
      }),
    open: Belt_Option.isSome(state.anchorEl)
  };
  var tmp$1 = Belt_Option.map(state.anchorEl, (function (el) {
          return el;
        }));
  if (tmp$1 !== undefined) {
    tmp.anchorEl = Caml_option.valFromOption(tmp$1);
  }
  return React.createElement("div", undefined, React.createElement(Core.Popover, tmp), React.createElement(Core.List, {
                  children: Belt_Array.mapWithIndex(messages, (function (i, message) {
                          return React.createElement(Core.ListItem, {
                                      button: true,
                                      children: React.createElement(Core.ListItemText, {
                                            children: message
                                          }),
                                      onClick: (function (evt) {
                                          return Curry._1(dispatch, /* OpenPopup */{
                                                      _0: [
                                                        evt.target,
                                                        message
                                                      ]
                                                    });
                                        }),
                                      key: String(i)
                                    });
                        }))
                }));
}

var make = ExamplePopover;

export {
  messages ,
  reducer ,
  make ,
  
}
/* messages Not a pure module */
